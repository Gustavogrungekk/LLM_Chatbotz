def run(self, context, verbose: bool = True):
    print("Streamlit session state:")
    print(context)
    print(type(context))

    # ✅ Ensure 'messages' exists and is not empty
    if "messages" not in context or not context["messages"]:
        print("Error: 'messages' key is missing or empty in context.")
        return "Error: No messages found in context.", "", ""

    # ✅ Ensure last message has 'content'
    last_message = context["messages"][-1]
    if "content" not in last_message:
        print("Error: Last message has no 'content' key.")
        return "Error: Last message is missing content.", "", ""

    query = last_message["content"]
    memory = context["messages"][:-1]

    # ✅ Print the initial input state for debugging
    inputs = {
        "messages": [HumanMessage(content=query)],
        "actions": ["<BEGIN>"],
        "question": query,  # ✅ Ensuring 'question' is present
        "memory": memory,
        "attempts_count": 0
    }
    
    print("DEBUG - Inputs before starting workflow:", inputs)

    try:
        current_action = []
        inter_list = []

        for output in self.app.stream(inputs, {"recursion_limit": 100}, stream_mode='updates'):
            print("DEBUG - Workflow Output:", output)  # ✅ Debug print

            for idx, (key, value) in enumerate(output.items()):
                print(f"DEBUG - Key: {key}, Value: {value}")

                if "question" not in value:
                    print(f"ERROR - 'question' MISSING in state at step: {key} -> {value}")

                if key.endswith("agent") and verbose:
                    print(f"Agent {key} working...")
                elif key.endswith("_action") and verbose:
                    print(f"Current action: `{value.get('actions', [])}`")
                    print(f"Current output: {value.get('inter', '')}")
                elif key == "date_extraction" and verbose:
                    print(value.get("date_filter", "No date filter found"))
                    print("Date filter for the current question:")
                elif key == "sugest_pergunta" and verbose:
                    print("Prompt engineering response:")
                    print(value.get("messages", []))
                elif key == "add_count" and verbose:
                    print("Adding attempt count:")
                    print(value.get("attempts_count", 0))
                elif key == "resposta" and verbose:
                    print("Verificando resposta:")
                    print(value.get("messages", []))
                elif verbose:
                    print("Finishing up...")
                    print(f"Final output: {value.get('inter', '')}")
                    print(f"Final action chain: {' -> '.join(value.get('actions', []))} -> <END>")

                # ✅ Ensure actions and messages are stored correctly
                if "actions" in value.keys():
                    current_action.append("->".join(value["actions"][-1]).replace("<BEGIN> -> ", "").replace("import pandas as pd;", ""))
                
                if "inter" in value:
                    inter = value.get("inter", None)
                    if inter is not None:
                        inter_list.append(inter)

            final_action = current_action[-1] if current_action else ""
            final_table = inter_list[-1] if inter_list else []
            final_message = value.get("messages", [""])[-1].content if "messages" in value else ""

    except Exception as e:
        print("Houve um erro no processo:")
        print(e)
        final_message = "Encontramos um problema processando sua pergunta. Tente novamente, com outra abordagem."
        final_action = ""
        final_table = ""

    return final_message, final_action, final_table
