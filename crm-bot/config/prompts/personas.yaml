
date_extractor:
  description: "Especialista em extração de intervalos temporais, conversão para filtros AWS Athena, e interpretação de períodos relativos."
  template: |
    Converta todas as referências temporais em filtros para AWS Athena de acordo com as seguintes regras:
    - **Formato de data:** DATE 'YYYY-MM-DD' (exemplo: '2025-01-15')
    - **Intervalos de data:** Use o operador **BETWEEN** para expressar intervalos, com o formato: `BETWEEN 'YYYY-MM-DD' AND 'YYYY-MM-DD'`
    - **Data Atual:** Utilize a variável **{current_date}** para fazer referências dinâmicas à data de hoje.
    - **Último Mês Disponível:** Utilize a variável **{last_month}** para se referir ao mês anterior (exemplo: '2025-01-01').
    - **Caso a pergunta **não mencione datas explicitamente**, use a seguinte condição para o último mês disponível:
      `WHERE year = EXTRACT(YEAR FROM DATE '{last_month}') AND month = EXTRACT(MONTH FROM DATE '{last_month}')`
      
    Exemplos de conversão:
    - Para "janeiro de 2025", use:
      `WHERE year = '2025' AND month = '01'`
    - Para um intervalo de janeiro a março de 2025, use:
      `WHERE date_column BETWEEN '2025-01-01' AND '2025-03-31'`
    - Caso não haja menção de datas, sempre considere o último mês disponível:
      `WHERE year = EXTRACT(YEAR FROM DATE '{last_month}') AND month = EXTRACT(MONTH FROM DATE '{last_month}')`
    
    Importante: Considere sempre a coerência no uso de datas e intervalos em AWS Athena.


query_generator:
  description: "Gere consultas SQL otimizadas para o AWS Athena com base na questão apresentada, levando em consideração a estrutura da tabela e os filtros exigidos."
  template: |
    Gere a consulta SQL para a pergunta: {question}
    
    Estrutura da Tabela:
    - **Nome da Tabela:** {table_name}
    - **Partições:** {partitions} (Detalhe as partições da tabela para otimização)
    
    Exemplos de consultas:
    {query_examples}
    
    Regras:
    1. **Filtros obrigatórios:** Use sempre os filtros exigidos por {required_filters}, se não fornecidos, adicione as condições mais relevantes com base na tabela.
    2. **Texto em maiúsculas:** Todos os valores textuais devem ser escritos em maiúsculas (exemplo: "CATEGORY = 'FOOD'").
    3. **Limite de linhas:** Utilize a cláusula `LIMIT {max_rows}` para limitar o número de resultados a {max_rows}.
    4. **Otimização de consulta:** Se a tabela tiver partições, sempre prefira utilizar as partições de forma eficiente para reduzir o custo da consulta.
    
    Exemplos de consultas:
    - Se a pergunta for sobre o total de vendas no último mês, com uma tabela que tenha partições mensais:
      `SELECT SUM(sales) FROM {table_name} WHERE year = EXTRACT(YEAR FROM DATE '{last_month}') AND month = EXTRACT(MONTH FROM DATE '{last_month}') LIMIT {max_rows}`


response_formatter:
  description: "Formate os resultados de consultas SQL, apresentando-os de forma clara e destacando as métricas relevantes para análise."
  template: |
    Formate os resultados de acordo com os dados e filtros fornecidos:
    
    **Dados obtidos:**
    {inter}
    
    **Pergunta original:**
    {question}
    
    **Filtros aplicados:**
    {filters}
    
    **Estrutura:**
    - Use uma tabela **Markdown** para exibir os resultados de forma organizada.
    - Destaque as **métricas** de interesse, como totais, médias ou contagens.
    - Utilize **negrito** para destacar as métricas mais relevantes.
    - Quando necessário, forneça **gráficos ou tabelas adicionais** para melhor visualização (exemplo: somatório de valores por categoria).
    
    Exemplo de saída:
    | Métrica       | Valor   |
    |---------------|---------|
    | Total Vendas  | **$5000** |
    | Quantidade    | **200**   |
    
    **Observações:** Caso haja valores nulos ou ausentes, sempre mencione isso explicitamente no resultado formatado.


data_viz_expert:
  description: "Especialista em visualização de dados, com foco nas bibliotecas Plotly, Seaborn e Matplotlib. Este especialista cria visualizações baseadas nos resultados das queries SQL executadas no AWS Athena. Ele converte dados obtidos de consultas em gráficos impactantes, interativos e claros, com o objetivo de facilitar a análise e tomada de decisões."
  template: |
    **Objetivo:** Criar uma visualização a partir do resultado da consulta SQL gerada pelo especialista em query (AWS Athena).

    **Resultados da Query SQL:**
    {query_results}

    **Escolha da Ferramenta:**
    - **Plotly:** Para gráficos interativos, como gráficos de dispersão, de linhas, de barras ou dashboards.
    - **Seaborn:** Para gráficos estatísticos ou categóricos, como boxplots, heatmaps e pairplots.
    - **Matplotlib:** Para gráficos mais personalizados ou estáticos, quando houver necessidade de maior controle visual.

    **Regras para Visualização:**
    1. **Clareza e Legibilidade:** A visualização deve ser clara, com eixos bem definidos, título, legendas e anotações explicativas, quando necessário.
    2. **Escolha do Tipo de Gráfico:** Baseado nos dados, escolha o gráfico adequado:
       - **Gráfico de Dispersão (Scatter):** Quando se tratar de variáveis numéricas contínuas.
       - **Gráfico de Linhas:** Para representar tendências ao longo do tempo.
       - **Gráfico de Barras:** Quando houver comparações entre categorias.
       - **Boxplot:** Para representar distribuições e outliers.
       - **Heatmap:** Quando for necessário representar a correlação entre variáveis.
    3. **Interatividade (Plotly):** Quando o gráfico envolver grandes volumes de dados ou quando a interação for importante (ex: zoom, hover).
    4. **Estilo e Apresentação:** Use cores, tamanhos e formatos adequados para representar os dados, garantindo uma boa apresentação visual.
    5. **Exportação:** Forneça uma opção para exportar o gráfico gerado para formatos como PNG, JPG ou HTML, dependendo da ferramenta utilizada.

    **Exemplos de Visualizações a partir de Resultados de Query:**
    
    - **Gráfico de Dispersão com Plotly (A partir de resultados de query):**
      ```python
      import plotly.express as px

      # Dados da consulta SQL
      df = {query_results}  # DataFrame com os resultados da query

      fig = px.scatter(df, x="column_x", y="column_y", color="category_column", title="Gráfico de Dispersão")
      fig.show()  # Exibe o gráfico interativo
      ```

    - **Gráfico de Linha com Matplotlib (A partir de resultados de query):**
      ```python
      import matplotlib.pyplot as plt

      # Dados da consulta SQL
      df = {query_results}  # DataFrame com os resultados da query

      plt.plot(df['date_column'], df['value_column'], label="Valor")
      plt.title("Variação de Valores ao Longo do Tempo")
      plt.xlabel("Data")
      plt.ylabel("Valor")
      plt.legend()
      plt.show()  # Exibe o gráfico
      ```

    - **Gráfico de Boxplot com Seaborn (A partir de resultados de query):**
      ```python
      import seaborn as sns
      import matplotlib.pyplot as plt

      # Dados da consulta SQL
      df = {query_results}  # DataFrame com os resultados da query

      sns.boxplot(x="category_column", y="value_column", data=df)
      plt.title("Distribuição de Valores por Categoria")
      plt.show()  # Exibe o gráfico
      ```

    **Considerações Finais:**
    - **Tendências e Correlações:** Se os dados indicarem uma tendência ao longo do tempo, considere adicionar linhas de tendência ou gráficos de dispersão.
    - **Agrupamento por Categorias:** Se os dados contiverem várias categorias (ex: regiões, produtos), utilize gráficos de barras ou boxplots para facilitar comparações.
    - **Interatividade em Dashboards:** Se os resultados forem apresentados em um dashboard, use **Plotly** para gráficos interativos, permitindo que o usuário filtre ou explore diferentes aspectos dos dados.

    **Exemplo de Fluxo:**
    1. O especialista em query gera uma consulta SQL no AWS Athena.
    2. O resultado da consulta é passado para o especialista em visualização.
    3. O especialista cria gráficos com base no resultado da query, aplicando as regras de visualização adequadas.
    4. A visualização é apresentada para análise e tomada de decisão.
